using System;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;

#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ID3Tagging.ED3Extract
{
    /// <summary>
    /// The repository data context.
    /// </summary>
    [System.Data.Linq.Mapping.DatabaseAttribute(Name = "Repository")]
    public partial class RepositoryDataContext : System.Data.Linq.DataContext
    {

        private static readonly MappingSource mappingSource = new AttributeMappingSource();

        #region Extensibility Method Definitions
        partial void OnCreated();
        partial void InsertSourceFile(SourceFile instance);
        partial void UpdateSourceFile(SourceFile instance);
        partial void DeleteSourceFile(SourceFile instance);
        partial void InsertSourceFileTag(SourceFileTag instance);
        partial void UpdateSourceFileTag(SourceFileTag instance);
        partial void DeleteSourceFileTag(SourceFileTag instance);
        partial void InsertTagBinary(TagBinary instance);
        partial void UpdateTagBinary(TagBinary instance);
        partial void DeleteTagBinary(TagBinary instance);
        partial void InsertTagFullText(TagFullText instance);
        partial void UpdateTagFullText(TagFullText instance);
        partial void DeleteTagFullText(TagFullText instance);
        partial void InsertTagPicture(TagPicture instance);
        partial void UpdateTagPicture(TagPicture instance);
        partial void DeleteTagPicture(TagPicture instance);
        partial void InsertTagText(TagText instance);
        partial void UpdateTagText(TagText instance);
        partial void DeleteTagText(TagText instance);
        #endregion

        /// <summary>
        /// Initializes a new instance of the <see cref="RepositoryDataContext"/> class.
        /// </summary>
        /// <param name="connection">
        /// The connection.
        /// </param>
        public RepositoryDataContext(string connection) :
                base(connection, mappingSource)
        {
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RepositoryDataContext"/> class.
        /// </summary>
        /// <param name="connection">
        /// The connection.
        /// </param>
        public RepositoryDataContext(IDbConnection connection) :
                base(connection, mappingSource)
        {
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RepositoryDataContext"/> class.
        /// </summary>
        /// <param name="connection">
        /// The connection.
        /// </param>
        /// <param name="mappingSource">
        /// The mapping source.
        /// </param>
        public RepositoryDataContext(string connection, MappingSource mappingSource) :
                base(connection, mappingSource)
        {
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RepositoryDataContext"/> class.
        /// </summary>
        /// <param name="connection">
        /// The connection.
        /// </param>
        /// <param name="mappingSource">
        /// The mapping source.
        /// </param>
        public RepositoryDataContext(IDbConnection connection, MappingSource mappingSource) :
                base(connection, mappingSource)
        {
            OnCreated();
        }

        /// <summary>
        /// Gets the source file.
        /// </summary>
        public Table<SourceFile> SourceFile
        {
            get
            {
                return this.GetTable<SourceFile>();
            }
        }

        /// <summary>
        /// Gets the source file tag.
        /// </summary>
        public Table<SourceFileTag> SourceFileTag
        {
            get
            {
                return this.GetTable<SourceFileTag>();
            }
        }

        /// <summary>
        /// Gets the tag binary.
        /// </summary>
        public Table<TagBinary> TagBinary
        {
            get
            {
                return this.GetTable<TagBinary>();
            }
        }

        /// <summary>
        /// Gets the tag full text.
        /// </summary>
        public Table<TagFullText> TagFullText
        {
            get
            {
                return this.GetTable<TagFullText>();
            }
        }

        /// <summary>
        /// Gets the tag picture.
        /// </summary>
        public Table<TagPicture> TagPicture
        {
            get
            {
                return this.GetTable<TagPicture>();
            }
        }

        /// <summary>
        /// Gets the tag text.
        /// </summary>
        public Table<TagText> TagText
        {
            get
            {
                return this.GetTable<TagText>();
            }
        }
    }

    /// <summary>
    /// The source file.
    /// </summary>
    [Table]
    public partial class SourceFile : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static readonly PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(string.Empty);

        private int _FileId;

        private string _FileName;

        private string _FilePath;

        private readonly EntitySet<SourceFileTag> _SourceFileTag;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnFileIdChanging(int value);
        partial void OnFileIdChanged();
        partial void OnFileNameChanging(string value);
        partial void OnFileNameChanged();
        partial void OnFilePathChanging(string value);
        partial void OnFilePathChanged();
        #endregion

        /// <summary>
        /// Initializes a new instance of the <see cref="SourceFile"/> class.
        /// </summary>
        public SourceFile()
        {
            this._SourceFileTag = new EntitySet<SourceFileTag>(this.attach_SourceFileTag, this.detach_SourceFileTag);
            OnCreated();
        }

        /// <summary>
        /// Gets or sets the file id.
        /// </summary>
        [Column(Storage = "_FileId", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int FileId
        {
            get
            {
                return this._FileId;
            }

            set
            {
                if (this._FileId != value)
                {
                    this.OnFileIdChanging(value);
                    this.SendPropertyChanging();
                    this._FileId = value;
                    this.SendPropertyChanged("FileId");
                    this.OnFileIdChanged();
                }
            }
        }

        /// <summary>
        /// Gets or sets the file name.
        /// </summary>
        [Column(Storage = "_FileName", DbType = "NVarChar(256) NOT NULL", CanBeNull = false)]
        public string FileName
        {
            get
            {
                return this._FileName;
            }

            set
            {
                if (this._FileName != value)
                {
                    this.OnFileNameChanging(value);
                    this.SendPropertyChanging();
                    this._FileName = value;
                    this.SendPropertyChanged("FileName");
                    this.OnFileNameChanged();
                }
            }
        }

        /// <summary>
        /// Gets or sets the file path.
        /// </summary>
        [Column(Storage = "_FilePath", DbType = "NVarChar(256)")]
        public string FilePath
        {
            get
            {
                return this._FilePath;
            }

            set
            {
                if (this._FilePath != value)
                {
                    this.OnFilePathChanging(value);
                    this.SendPropertyChanging();
                    this._FilePath = value;
                    this.SendPropertyChanged("FilePath");
                    this.OnFilePathChanged();
                }
            }
        }

        /// <summary>
        /// Gets or sets the source file tag.
        /// </summary>
        [Association(Name = "FK_SourceFileTag_SourceFile", Storage = "_SourceFileTag", ThisKey = "FileId", OtherKey = "FileId", DeleteRule = "CASCADE")]
        public EntitySet<SourceFileTag> SourceFileTag
        {
            get
            {
                return this._SourceFileTag;
            }

            set
            {
                this._SourceFileTag.Assign(value);
            }
        }

        /// <summary>
        /// The property changing.
        /// </summary>
        public event PropertyChangingEventHandler PropertyChanging;

        /// <summary>
        /// The property changed.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// The send property changing.
        /// </summary>
        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        /// <summary>
        /// The send property changed.
        /// </summary>
        /// <param name="propertyName">
        /// The property name.
        /// </param>
        protected virtual void SendPropertyChanged(string propertyName)
        {
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_SourceFileTag(SourceFileTag entity)
        {
            this.SendPropertyChanging();
            entity.SourceFile = this;
        }

        private void detach_SourceFileTag(SourceFileTag entity)
        {
            this.SendPropertyChanging();
            entity.SourceFile = null;
        }
    }

    /// <summary>
    /// The source file tag.
    /// </summary>
    [Table]
    public partial class SourceFileTag : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static readonly PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(string.Empty);

        private int _TagId;

        private int _FileId;

        private string _Tag;

        private EntityRef<SourceFile> _SourceFile;

        private EntityRef<TagBinary> _TagBinary;

        private EntityRef<TagFullText> _TagFullText;

        private EntityRef<TagPicture> _TagPicture;

        private EntityRef<TagText> _TagText;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnTagIdChanging(int value);
        partial void OnTagIdChanged();
        partial void OnFileIdChanging(int value);
        partial void OnFileIdChanged();
        partial void OnTagChanging(string value);
        partial void OnTagChanged();
        #endregion

        /// <summary>
        /// Initializes a new instance of the <see cref="SourceFileTag"/> class.
        /// </summary>
        public SourceFileTag()
        {
            this._SourceFile = default(EntityRef<SourceFile>);
            this._TagBinary = default(EntityRef<TagBinary>);
            this._TagFullText = default(EntityRef<TagFullText>);
            this._TagPicture = default(EntityRef<TagPicture>);
            this._TagText = default(EntityRef<TagText>);
            OnCreated();
        }

        /// <summary>
        /// Gets or sets the tag id.
        /// </summary>
        [Column(Storage = "_TagId", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int TagId
        {
            get
            {
                return this._TagId;
            }

            set
            {
                if (this._TagId != value)
                {
                    this.OnTagIdChanging(value);
                    this.SendPropertyChanging();
                    this._TagId = value;
                    this.SendPropertyChanged("TagId");
                    this.OnTagIdChanged();
                }
            }
        }

        /// <summary>
        /// Gets or sets the file id.
        /// </summary>
        /// <exception cref="ForeignKeyReferenceAlreadyHasValueException">
        /// </exception>
        [Column(Storage = "_FileId", DbType = "Int NOT NULL")]
        public int FileId
        {
            get
            {
                return this._FileId;
            }

            set
            {
                if (this._FileId != value)
                {
                    if (this._SourceFile.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnFileIdChanging(value);
                    this.SendPropertyChanging();
                    this._FileId = value;
                    this.SendPropertyChanged("FileId");
                    this.OnFileIdChanged();
                }
            }
        }

        /// <summary>
        /// Gets or sets the tag.
        /// </summary>
        [Column(Storage = "_Tag", DbType = "NChar(4) NOT NULL", CanBeNull = false)]
        public string Tag
        {
            get
            {
                return this._Tag;
            }

            set
            {
                if (this._Tag != value)
                {
                    this.OnTagChanging(value);
                    this.SendPropertyChanging();
                    this._Tag = value;
                    this.SendPropertyChanged("Tag");
                    this.OnTagChanged();
                }
            }
        }

        /// <summary>
        /// Gets or sets the source file.
        /// </summary>
        [Association(Name = "FK_SourceFileTag_SourceFile", Storage = "_SourceFile", ThisKey = "FileId", OtherKey = "FileId", IsForeignKey = true, DeleteOnNull = true)]
        public SourceFile SourceFile
        {
            get
            {
                return this._SourceFile.Entity;
            }

            set
            {
                SourceFile previousValue = this._SourceFile.Entity;
                if ((previousValue != value)
                            || (this._SourceFile.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._SourceFile.Entity = null;
                        previousValue.SourceFileTag.Remove(this);
                    }

                    this._SourceFile.Entity = value;
                    if ((value != null))
                    {
                        value.SourceFileTag.Add(this);
                        this._FileId = value.FileId;
                    }
                    else
                    {
                        this._FileId = default(int);
                    }

                    this.SendPropertyChanged("SourceFile");
                }
            }
        }

        /// <summary>
        /// Gets or sets the tag binary.
        /// </summary>
        [Association(Name = "FK_TagBinary_SourceFileTag", Storage = "_TagBinary", ThisKey = "TagId", OtherKey = "TagId", IsUnique = true, IsForeignKey = false, DeleteRule = "CASCADE")]
        public TagBinary TagBinary
        {
            get
            {
                return this._TagBinary.Entity;
            }

            set
            {
                TagBinary previousValue = this._TagBinary.Entity;
                if ((previousValue != value)
                            || (this._TagBinary.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._TagBinary.Entity = null;
                        previousValue.SourceFileTag = null;
                    }

                    this._TagBinary.Entity = value;
                    if ((value != null))
                    {
                        value.SourceFileTag = this;
                    }

                    this.SendPropertyChanged("TagBinary");
                }
            }
        }

        /// <summary>
        /// Gets or sets the tag full text.
        /// </summary>
        [Association(Name = "FK_TagFullText_SourceFileTag", Storage = "_TagFullText", ThisKey = "TagId", OtherKey = "TagId", IsUnique = true, IsForeignKey = false, DeleteRule = "CASCADE")]
        public TagFullText TagFullText
        {
            get
            {
                return this._TagFullText.Entity;
            }

            set
            {
                TagFullText previousValue = this._TagFullText.Entity;
                if ((previousValue != value)
                            || (this._TagFullText.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._TagFullText.Entity = null;
                        previousValue.SourceFileTag = null;
                    }

                    this._TagFullText.Entity = value;
                    if ((value != null))
                    {
                        value.SourceFileTag = this;
                    }

                    this.SendPropertyChanged("TagFullText");
                }
            }
        }

        /// <summary>
        /// Gets or sets the tag picture.
        /// </summary>
        [Association(Name = "FK_TagPicture_SourceFileTag", Storage = "_TagPicture", ThisKey = "TagId", OtherKey = "TagId", IsUnique = true, IsForeignKey = false, DeleteRule = "CASCADE")]
        public TagPicture TagPicture
        {
            get
            {
                return this._TagPicture.Entity;
            }

            set
            {
                TagPicture previousValue = this._TagPicture.Entity;
                if ((previousValue != value)
                            || (this._TagPicture.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._TagPicture.Entity = null;
                        previousValue.SourceFileTag = null;
                    }

                    this._TagPicture.Entity = value;
                    if ((value != null))
                    {
                        value.SourceFileTag = this;
                    }

                    this.SendPropertyChanged("TagPicture");
                }
            }
        }

        /// <summary>
        /// Gets or sets the tag text.
        /// </summary>
        [Association(Name = "FK_TagText_SourceFileTag", Storage = "_TagText", ThisKey = "TagId", OtherKey = "TagId", IsUnique = true, IsForeignKey = false, DeleteRule = "CASCADE")]
        public TagText TagText
        {
            get
            {
                return this._TagText.Entity;
            }

            set
            {
                TagText previousValue = this._TagText.Entity;
                if ((previousValue != value)
                            || (this._TagText.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._TagText.Entity = null;
                        previousValue.SourceFileTag = null;
                    }

                    this._TagText.Entity = value;
                    if ((value != null))
                    {
                        value.SourceFileTag = this;
                    }

                    this.SendPropertyChanged("TagText");
                }
            }
        }

        /// <summary>
        /// The property changing.
        /// </summary>
        public event PropertyChangingEventHandler PropertyChanging;

        /// <summary>
        /// The property changed.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// The send property changing.
        /// </summary>
        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        /// <summary>
        /// The send property changed.
        /// </summary>
        /// <param name="propertyName">
        /// The property name.
        /// </param>
        protected virtual void SendPropertyChanged(string propertyName)
        {
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    /// <summary>
    /// The tag binary.
    /// </summary>
    [Table]
    public partial class TagBinary : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static readonly PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(string.Empty);

        private int _TagId;

        private short _TextEncodingId;

        private string _MimeType;

        private string _FileName;

        private string _Description;

        private Binary _BinaryObject;

        private EntityRef<SourceFileTag> _SourceFileTag;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnTagIdChanging(int value);
        partial void OnTagIdChanged();
        partial void OnTextEncodingIdChanging(short value);
        partial void OnTextEncodingIdChanged();
        partial void OnMimeTypeChanging(string value);
        partial void OnMimeTypeChanged();
        partial void OnFileNameChanging(string value);
        partial void OnFileNameChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnBinaryObjectChanging(Binary value);
        partial void OnBinaryObjectChanged();
        #endregion

        /// <summary>
        /// Initializes a new instance of the <see cref="TagBinary"/> class.
        /// </summary>
        public TagBinary()
        {
            this._SourceFileTag = default(EntityRef<SourceFileTag>);
            OnCreated();
        }

        /// <summary>
        /// Gets or sets the tag id.
        /// </summary>
        /// <exception cref="ForeignKeyReferenceAlreadyHasValueException">
        /// </exception>
        [Column(Storage = "_TagId", DbType = "Int NOT NULL", IsPrimaryKey = true)]
        public int TagId
        {
            get
            {
                return this._TagId;
            }

            set
            {
                if (this._TagId != value)
                {
                    if (this._SourceFileTag.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnTagIdChanging(value);
                    this.SendPropertyChanging();
                    this._TagId = value;
                    this.SendPropertyChanged("TagId");
                    this.OnTagIdChanged();
                }
            }
        }

        /// <summary>
        /// Gets or sets the text encoding id.
        /// </summary>
        [Column(Storage = "_TextEncodingId", DbType = "SmallInt NOT NULL")]
        public short TextEncodingId
        {
            get
            {
                return this._TextEncodingId;
            }

            set
            {
                if (this._TextEncodingId != value)
                {
                    this.OnTextEncodingIdChanging(value);
                    this.SendPropertyChanging();
                    this._TextEncodingId = value;
                    this.SendPropertyChanged("TextEncodingId");
                    this.OnTextEncodingIdChanged();
                }
            }
        }

        /// <summary>
        /// Gets or sets the mime type.
        /// </summary>
        [Column(Storage = "_MimeType", DbType = "NVarChar(50)")]
        public string MimeType
        {
            get
            {
                return this._MimeType;
            }

            set
            {
                if (this._MimeType != value)
                {
                    this.OnMimeTypeChanging(value);
                    this.SendPropertyChanging();
                    this._MimeType = value;
                    this.SendPropertyChanged("MimeType");
                    this.OnMimeTypeChanged();
                }
            }
        }

        /// <summary>
        /// Gets or sets the file name.
        /// </summary>
        [Column(Storage = "_FileName", DbType = "NVarChar(256)")]
        public string FileName
        {
            get
            {
                return this._FileName;
            }

            set
            {
                if (this._FileName != value)
                {
                    this.OnFileNameChanging(value);
                    this.SendPropertyChanging();
                    this._FileName = value;
                    this.SendPropertyChanged("FileName");
                    this.OnFileNameChanged();
                }
            }
        }

        /// <summary>
        /// Gets or sets the description.
        /// </summary>
        [Column(Storage = "_Description", DbType = "NVarChar(256)")]
        public string Description
        {
            get
            {
                return this._Description;
            }

            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        /// <summary>
        /// Gets or sets the binary object.
        /// </summary>
        [Column(Storage = "_BinaryObject", DbType = "Image", CanBeNull = true, UpdateCheck = UpdateCheck.Never)]
        public Binary BinaryObject
        {
            get
            {
                return this._BinaryObject;
            }

            set
            {
                if (this._BinaryObject != value)
                {
                    this.OnBinaryObjectChanging(value);
                    this.SendPropertyChanging();
                    this._BinaryObject = value;
                    this.SendPropertyChanged("BinaryObject");
                    this.OnBinaryObjectChanged();
                }
            }
        }

        /// <summary>
        /// Gets or sets the source file tag.
        /// </summary>
        [Association(Name = "FK_TagBinary_SourceFileTag", Storage = "_SourceFileTag", ThisKey = "TagId", OtherKey = "TagId", IsForeignKey = true, DeleteOnNull = true)]
        public SourceFileTag SourceFileTag
        {
            get
            {
                return this._SourceFileTag.Entity;
            }

            set
            {
                SourceFileTag previousValue = this._SourceFileTag.Entity;
                if ((previousValue != value)
                            || (this._SourceFileTag.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._SourceFileTag.Entity = null;
                        previousValue.TagBinary = null;
                    }

                    this._SourceFileTag.Entity = value;
                    if ((value != null))
                    {
                        value.TagBinary = this;
                        this._TagId = value.TagId;
                    }
                    else
                    {
                        this._TagId = default(int);
                    }

                    this.SendPropertyChanged("SourceFileTag");
                }
            }
        }

        /// <summary>
        /// The property changing.
        /// </summary>
        public event PropertyChangingEventHandler PropertyChanging;

        /// <summary>
        /// The property changed.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// The send property changing.
        /// </summary>
        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        /// <summary>
        /// The send property changed.
        /// </summary>
        /// <param name="propertyName">
        /// The property name.
        /// </param>
        protected virtual void SendPropertyChanged(string propertyName)
        {
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    /// <summary>
    /// The tag full text.
    /// </summary>
    [Table]
    public partial class TagFullText : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static readonly PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(string.Empty);

        private int _TagId;

        private short _TextEncodingId;

        private string _TextLanguage;

        private string _Description;

        private string _Comment;

        private EntityRef<SourceFileTag> _SourceFileTag;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnTagIdChanging(int value);
        partial void OnTagIdChanged();
        partial void OnTextEncodingIdChanging(short value);
        partial void OnTextEncodingIdChanged();
        partial void OnTextLanguageChanging(string value);
        partial void OnTextLanguageChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnCommentChanging(string value);
        partial void OnCommentChanged();
        #endregion

        /// <summary>
        /// Initializes a new instance of the <see cref="TagFullText"/> class.
        /// </summary>
        public TagFullText()
        {
            this._SourceFileTag = default(EntityRef<SourceFileTag>);
            OnCreated();
        }

        /// <summary>
        /// Gets or sets the tag id.
        /// </summary>
        /// <exception cref="ForeignKeyReferenceAlreadyHasValueException">
        /// </exception>
        [Column(Storage = "_TagId", DbType = "Int NOT NULL", IsPrimaryKey = true)]
        public int TagId
        {
            get
            {
                return this._TagId;
            }

            set
            {
                if (this._TagId != value)
                {
                    if (this._SourceFileTag.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnTagIdChanging(value);
                    this.SendPropertyChanging();
                    this._TagId = value;
                    this.SendPropertyChanged("TagId");
                    this.OnTagIdChanged();
                }
            }
        }

        /// <summary>
        /// Gets or sets the text encoding id.
        /// </summary>
        [Column(Storage = "_TextEncodingId", DbType = "SmallInt NOT NULL")]
        public short TextEncodingId
        {
            get
            {
                return this._TextEncodingId;
            }

            set
            {
                if (this._TextEncodingId != value)
                {
                    this.OnTextEncodingIdChanging(value);
                    this.SendPropertyChanging();
                    this._TextEncodingId = value;
                    this.SendPropertyChanged("TextEncodingId");
                    this.OnTextEncodingIdChanged();
                }
            }
        }

        /// <summary>
        /// Gets or sets the text language.
        /// </summary>
        [Column(Storage = "_TextLanguage", DbType = "NChar(3) NOT NULL", CanBeNull = false)]
        public string TextLanguage
        {
            get
            {
                return this._TextLanguage;
            }

            set
            {
                if (this._TextLanguage != value)
                {
                    this.OnTextLanguageChanging(value);
                    this.SendPropertyChanging();
                    this._TextLanguage = value;
                    this.SendPropertyChanged("TextLanguage");
                    this.OnTextLanguageChanged();
                }
            }
        }

        /// <summary>
        /// Gets or sets the description.
        /// </summary>
        [Column(Storage = "_Description", DbType = "NVarChar(256)")]
        public string Description
        {
            get
            {
                return this._Description;
            }

            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        /// <summary>
        /// Gets or sets the comment.
        /// </summary>
        [Column(Storage = "_Comment", DbType = "NText", UpdateCheck = UpdateCheck.Never)]
        public string Comment
        {
            get
            {
                return this._Comment;
            }

            set
            {
                if (this._Comment != value)
                {
                    this.OnCommentChanging(value);
                    this.SendPropertyChanging();
                    this._Comment = value;
                    this.SendPropertyChanged("Comment");
                    this.OnCommentChanged();
                }
            }
        }

        /// <summary>
        /// Gets or sets the source file tag.
        /// </summary>
        [Association(Name = "FK_TagFullText_SourceFileTag", Storage = "_SourceFileTag", ThisKey = "TagId", OtherKey = "TagId", IsForeignKey = true, DeleteOnNull = true)]
        public SourceFileTag SourceFileTag
        {
            get
            {
                return this._SourceFileTag.Entity;
            }

            set
            {
                SourceFileTag previousValue = this._SourceFileTag.Entity;
                if ((previousValue != value)
                            || (this._SourceFileTag.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._SourceFileTag.Entity = null;
                        previousValue.TagFullText = null;
                    }

                    this._SourceFileTag.Entity = value;
                    if ((value != null))
                    {
                        value.TagFullText = this;
                        this._TagId = value.TagId;
                    }
                    else
                    {
                        this._TagId = default(int);
                    }

                    this.SendPropertyChanged("SourceFileTag");
                }
            }
        }

        /// <summary>
        /// The property changing.
        /// </summary>
        public event PropertyChangingEventHandler PropertyChanging;

        /// <summary>
        /// The property changed.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// The send property changing.
        /// </summary>
        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        /// <summary>
        /// The send property changed.
        /// </summary>
        /// <param name="propertyName">
        /// The property name.
        /// </param>
        protected virtual void SendPropertyChanged(string propertyName)
        {
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    /// <summary>
    /// The tag picture.
    /// </summary>
    [Table]
    public partial class TagPicture : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static readonly PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(string.Empty);

        private int _TagId;

        private short _TextEncodingId;

        private string _MimeType;

        private short _PictureTypeId;

        private string _Description;

        private Binary _BinaryImage;

        private EntityRef<SourceFileTag> _SourceFileTag;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnTagIdChanging(int value);
        partial void OnTagIdChanged();
        partial void OnTextEncodingIdChanging(short value);
        partial void OnTextEncodingIdChanged();
        partial void OnMimeTypeChanging(string value);
        partial void OnMimeTypeChanged();
        partial void OnPictureTypeIdChanging(short value);
        partial void OnPictureTypeIdChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnBinaryImageChanging(Binary value);
        partial void OnBinaryImageChanged();
        #endregion

        /// <summary>
        /// Initializes a new instance of the <see cref="TagPicture"/> class.
        /// </summary>
        public TagPicture()
        {
            this._SourceFileTag = default(EntityRef<SourceFileTag>);
            OnCreated();
        }

        /// <summary>
        /// Gets or sets the tag id.
        /// </summary>
        /// <exception cref="ForeignKeyReferenceAlreadyHasValueException">
        /// </exception>
        [Column(Storage = "_TagId", DbType = "Int NOT NULL", IsPrimaryKey = true)]
        public int TagId
        {
            get
            {
                return this._TagId;
            }

            set
            {
                if (this._TagId != value)
                {
                    if (this._SourceFileTag.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnTagIdChanging(value);
                    this.SendPropertyChanging();
                    this._TagId = value;
                    this.SendPropertyChanged("TagId");
                    this.OnTagIdChanged();
                }
            }
        }

        /// <summary>
        /// Gets or sets the text encoding id.
        /// </summary>
        [Column(Storage = "_TextEncodingId", DbType = "SmallInt NOT NULL")]
        public short TextEncodingId
        {
            get
            {
                return this._TextEncodingId;
            }

            set
            {
                if (this._TextEncodingId != value)
                {
                    this.OnTextEncodingIdChanging(value);
                    this.SendPropertyChanging();
                    this._TextEncodingId = value;
                    this.SendPropertyChanged("TextEncodingId");
                    this.OnTextEncodingIdChanged();
                }
            }
        }

        /// <summary>
        /// Gets or sets the mime type.
        /// </summary>
        [Column(Storage = "_MimeType", DbType = "NVarChar(50)")]
        public string MimeType
        {
            get
            {
                return this._MimeType;
            }

            set
            {
                if (this._MimeType != value)
                {
                    this.OnMimeTypeChanging(value);
                    this.SendPropertyChanging();
                    this._MimeType = value;
                    this.SendPropertyChanged("MimeType");
                    this.OnMimeTypeChanged();
                }
            }
        }

        /// <summary>
        /// Gets or sets the picture type id.
        /// </summary>
        [Column(Storage = "_PictureTypeId", DbType = "SmallInt NOT NULL")]
        public short PictureTypeId
        {
            get
            {
                return this._PictureTypeId;
            }

            set
            {
                if (this._PictureTypeId != value)
                {
                    this.OnPictureTypeIdChanging(value);
                    this.SendPropertyChanging();
                    this._PictureTypeId = value;
                    this.SendPropertyChanged("PictureTypeId");
                    this.OnPictureTypeIdChanged();
                }
            }
        }

        /// <summary>
        /// Gets or sets the description.
        /// </summary>
        [Column(Storage = "_Description", DbType = "NVarChar(256)")]
        public string Description
        {
            get
            {
                return this._Description;
            }

            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        /// <summary>
        /// Gets or sets the binary image.
        /// </summary>
        [Column(Storage = "_BinaryImage", DbType = "Image", CanBeNull = true, UpdateCheck = UpdateCheck.Never)]
        public Binary BinaryImage
        {
            get
            {
                return this._BinaryImage;
            }

            set
            {
                if (this._BinaryImage != value)
                {
                    this.OnBinaryImageChanging(value);
                    this.SendPropertyChanging();
                    this._BinaryImage = value;
                    this.SendPropertyChanged("BinaryImage");
                    this.OnBinaryImageChanged();
                }
            }
        }

        /// <summary>
        /// Gets or sets the source file tag.
        /// </summary>
        [Association(Name = "FK_TagPicture_SourceFileTag", Storage = "_SourceFileTag", ThisKey = "TagId", OtherKey = "TagId", IsForeignKey = true, DeleteOnNull = true)]
        public SourceFileTag SourceFileTag
        {
            get
            {
                return this._SourceFileTag.Entity;
            }

            set
            {
                SourceFileTag previousValue = this._SourceFileTag.Entity;
                if ((previousValue != value)
                            || (this._SourceFileTag.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._SourceFileTag.Entity = null;
                        previousValue.TagPicture = null;
                    }

                    this._SourceFileTag.Entity = value;
                    if ((value != null))
                    {
                        value.TagPicture = this;
                        this._TagId = value.TagId;
                    }
                    else
                    {
                        this._TagId = default(int);
                    }

                    this.SendPropertyChanged("SourceFileTag");
                }
            }
        }

        /// <summary>
        /// The property changing.
        /// </summary>
        public event PropertyChangingEventHandler PropertyChanging;

        /// <summary>
        /// The property changed.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// The send property changing.
        /// </summary>
        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        /// <summary>
        /// The send property changed.
        /// </summary>
        /// <param name="propertyName">
        /// The property name.
        /// </param>
        protected virtual void SendPropertyChanged(string propertyName)
        {
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    /// <summary>
    /// The tag text.
    /// </summary>
    [Table]
    public partial class TagText : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static readonly PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(string.Empty);

        private int _TagId;

        private short _TextEncodingId;

        private string _Description;

        private string _Text;

        private EntityRef<SourceFileTag> _SourceFileTag;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnTagIdChanging(int value);
        partial void OnTagIdChanged();
        partial void OnTextEncodingIdChanging(short value);
        partial void OnTextEncodingIdChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnTextChanging(string value);
        partial void OnTextChanged();
        #endregion

        /// <summary>
        /// Initializes a new instance of the <see cref="TagText"/> class.
        /// </summary>
        public TagText()
        {
            this._SourceFileTag = default(EntityRef<SourceFileTag>);
            OnCreated();
        }

        /// <summary>
        /// Gets or sets the tag id.
        /// </summary>
        /// <exception cref="ForeignKeyReferenceAlreadyHasValueException">
        /// </exception>
        [Column(Storage = "_TagId", DbType = "Int NOT NULL", IsPrimaryKey = true)]
        public int TagId
        {
            get
            {
                return this._TagId;
            }

            set
            {
                if (this._TagId != value)
                {
                    if (this._SourceFileTag.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnTagIdChanging(value);
                    this.SendPropertyChanging();
                    this._TagId = value;
                    this.SendPropertyChanged("TagId");
                    this.OnTagIdChanged();
                }
            }
        }

        /// <summary>
        /// Gets or sets the text encoding id.
        /// </summary>
        [Column(Storage = "_TextEncodingId", DbType = "SmallInt NOT NULL")]
        public short TextEncodingId
        {
            get
            {
                return this._TextEncodingId;
            }

            set
            {
                if (this._TextEncodingId != value)
                {
                    this.OnTextEncodingIdChanging(value);
                    this.SendPropertyChanging();
                    this._TextEncodingId = value;
                    this.SendPropertyChanged("TextEncodingId");
                    this.OnTextEncodingIdChanged();
                }
            }
        }

        /// <summary>
        /// Gets or sets the description.
        /// </summary>
        [Column(Storage = "_Description", DbType = "NVarChar(256)")]
        public string Description
        {
            get
            {
                return this._Description;
            }

            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        /// <summary>
        /// Gets or sets the text.
        /// </summary>
        [Column(Storage = "_Text", DbType = "NVarChar(4000)")]
        public string Text
        {
            get
            {
                return this._Text;
            }

            set
            {
                if (this._Text != value)
                {
                    this.OnTextChanging(value);
                    this.SendPropertyChanging();
                    this._Text = value;
                    this.SendPropertyChanged("Text");
                    this.OnTextChanged();
                }
            }
        }

        /// <summary>
        /// Gets or sets the source file tag.
        /// </summary>
        [Association(Name = "FK_TagText_SourceFileTag", Storage = "_SourceFileTag", ThisKey = "TagId", OtherKey = "TagId", IsForeignKey = true, DeleteOnNull = true)]
        public SourceFileTag SourceFileTag
        {
            get
            {
                return this._SourceFileTag.Entity;
            }

            set
            {
                SourceFileTag previousValue = this._SourceFileTag.Entity;
                if ((previousValue != value)
                            || (this._SourceFileTag.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._SourceFileTag.Entity = null;
                        previousValue.TagText = null;
                    }

                    this._SourceFileTag.Entity = value;
                    if ((value != null))
                    {
                        value.TagText = this;
                        this._TagId = value.TagId;
                    }
                    else
                    {
                        this._TagId = default(int);
                    }

                    this.SendPropertyChanged("SourceFileTag");
                }
            }
        }

        /// <summary>
        /// The property changing.
        /// </summary>
        public event PropertyChangingEventHandler PropertyChanging;

        /// <summary>
        /// The property changed.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// The send property changing.
        /// </summary>
        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        /// <summary>
        /// The send property changed.
        /// </summary>
        /// <param name="propertyName">
        /// The property name.
        /// </param>
        protected virtual void SendPropertyChanged(string propertyName)
        {
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
}
#pragma warning restore 1591
